#include <bits/stdc++.h>
typedef long long ll;
using namespace std;

//Prim's Algorithm
#define MX 550
#define inf 1e+9
typedef pair<ll, ll> pll;
ll mst;
bool taken[MX];
vector <pll> edges[MX];

void prims_algo(ll start)
{
    fill(taken, taken+MX, false);

    priority_queue <pll, vector<pll>, greater<pll> > pq;
    pq.push(make_pair(0, start));

    mst = 0;
    while(!pq.empty())
    {
        ll u = pq.top().second, w = pq.top().first;
        pq.pop();

        if(!taken[u]) {
			taken[u] = true;
			mst += w;

			for(ll i = 0; i < edges[u].size(); i++) {
				ll v = edges[u][i].first, _w = edges[u][i].second;
				if(!taken[v]) {
					pq.push(make_pair(_w, v));
				}
			}
        }
    }
}

int main()
{
    ll n, e;
    cin>>n>>e;

    for(int i = 0; i < e; i++) {
        ll u, v, w;
        cin>>u>>v>>w;

        edges[u].push_back(make_pair(v, w));
        edges[v].push_back(make_pair(u, w));
    }

    prims_algo(0);

    cout<<mst<<endl;
}
/*
5 7
0 1 4
0 2 5
0 3 6
0 4 6
1 2 2
2 3 1
3 4 9
*/